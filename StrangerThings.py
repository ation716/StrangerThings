# coding:utf8
import json
import sys
import os
from mimetypes import inited
from typing import Union

p = os.path.abspath(__file__)
p = os.path.dirname(p)
p = os.path.dirname(p)
p = os.path.dirname(p)
sys.path.append(p)
try:
    import asyncio
    import random
    import time
    import requests
    import asyncio
    import random
    import config as cg
    from collections import namedtuple, deque
    import uuid
except Exception as e:
    print(e)

buss_area1={"busi1":['HJ0009HW0101', 'HJ0004HW0101', 'HJ0021HW0101', 'HJ0003HW0101', 'HJ0022HW0101', 'HJ0017HW0101', 'HJ0005HW0101', 'HJ0034HW0101', 'HJ0032HW0101', 'HJ0002HW0101',
                    'HJ0015HW0101', 'HJ0006HW0101', 'HJ0010HW0101', 'HJ0031HW0101', 'HJ0014HW0101', 'HJ0020HW0101', 'HJ0023HW0101', 'HJ0019HW0101', 'HJ0016HW0101', 'HJ0026HW0101',
                    'HJ0029HW0101', 'HJ0033HW0101', 'HJ0013HW0101', 'HJ0012HW0101', 'HJ0028HW0101', 'HJ0011HW0101', 'HJ0025HW0101', 'HJ0018HW0101', 'HJ0063HW0101', 'HJ0030HW0101',
                    'HJ0035HW0101', 'HJ0008HW0101', 'HJ0007HW0101', 'HJ0024HW0101', 'HJ0001HW0101', 'HJ0027HW0101'],
            'busi2':['CS01HW0312', 'CS01HW0412', 'CS01HW0512', 'CS01HW0612', 'CS01HW0712', 'CS01HW0812', 'CS01HW0912', 'CS02HW0112', 'CS02HW0212', 'CS02HW0312',
            'CS02HW0412', 'CS02HW0512', 'CS02HW0612', 'CS02HW0712', 'CS02HW0812', 'CS02HW0912', 'CS02HW0110', 'CS02HW0210', 'CS02HW0310', 'CS02HW0410',
            'CS02HW0510', 'CS02HW0610', 'CS02HW0710', 'CS02HW0810', 'CS02HW0910', 'CS01HW0310', 'CS01HW0410', 'CS01HW0510', 'CS01HW0610', 'CS01HW0710',
            'CS01HW0810', 'CS01HW0910', 'CS09HW0114', 'CS09HW0214', 'CS09HW0314', 'CS09HW0414', 'CS09HW0514', 'CS09HW0614', 'CS09HW0714', 'CS09HW0814',
            'CS09HW0914', 'CS10HW0116', 'CS10HW0216', 'CS10HW0316', 'CS10HW0416', 'CS10HW0516', 'CS10HW0616', 'CS10HW0716', 'CS10HW0816', 'CS10HW0916',
            'CS09HW0107', 'CS09HW0207', 'CS09HW0307', 'CS09HW0407', 'CS09HW0507', 'CS09HW0607', 'CS09HW0707', 'CS09HW0807', 'CS09HW0907', 'CS10HW0109',
            'CS10HW0209', 'CS10HW0309', 'CS10HW0409', 'CS10HW0509', 'CS10HW0609', 'CS10HW0709', 'CS10HW0809', 'CS10HW0909', 'CS10HW0110', 'CS10HW0210',
            'CS10HW0310', 'CS10HW0410', 'CS10HW0510', 'CS10HW0610', 'CS10HW0710', 'CS10HW0810', 'CS10HW0910', 'CS09HW0108', 'CS09HW0208', 'CS09HW0308',
            'CS09HW0408', 'CS09HW0508', 'CS09HW0608', 'CS09HW0708', 'CS09HW0808', 'CS09HW0908', 'CS01HW0315', 'CS01HW0415', 'CS01HW0515', 'CS01HW0615',
            'CS01HW0715', 'CS01HW0815', 'CS01HW0915', 'CS02HW0115', 'CS02HW0215', 'CS02HW0315', 'CS02HW0415', 'CS02HW0515', 'CS02HW0615', 'CS02HW0715',
            'CS02HW0815', 'CS02HW0915', 'CS02HW0122', 'CS02HW0222', 'CS02HW0322', 'CS02HW0422', 'CS02HW0522', 'CS02HW0622', 'CS02HW0722', 'CS02HW0822',
            'CS02HW0922', 'CS01HW0322', 'CS01HW0422', 'CS01HW0522', 'CS01HW0622', 'CS01HW0722', 'CS01HW0822', 'CS01HW0922', 'CS10HW0104', 'CS10HW0204',
            'CS10HW0304', 'CS10HW0404', 'CS10HW0504', 'CS10HW0604', 'CS10HW0704', 'CS10HW0804', 'CS10HW0904', 'CS09HW0102', 'CS09HW0202', 'CS09HW0302',
            'CS09HW0402', 'CS09HW0502', 'CS09HW0602', 'CS09HW0702', 'CS09HW0802', 'CS09HW0902', 'CS10HW0107', 'CS10HW0207', 'CS10HW0307', 'CS10HW0407',
            'CS10HW0507', 'CS10HW0607', 'CS10HW0707', 'CS10HW0807', 'CS10HW0907', 'CS09HW0105', 'CS09HW0205', 'CS09HW0305', 'CS09HW0405', 'CS09HW0505',
            'CS09HW0605', 'CS09HW0705', 'CS09HW0805', 'CS09HW0905', 'CS10HW0111', 'CS10HW0211', 'CS10HW0311', 'CS10HW0411', 'CS10HW0511', 'CS10HW0611',
            'CS10HW0711', 'CS10HW0811', 'CS10HW0911', 'CS09HW0109', 'CS09HW0209', 'CS09HW0309', 'CS09HW0409', 'CS09HW0509', 'CS09HW0609', 'CS09HW0709',
            'CS09HW0809', 'CS09HW0909', 'CS01HW0316', 'CS01HW0416', 'CS01HW0516', 'CS01HW0616', 'CS01HW0716', 'CS01HW0816', 'CS01HW0916', 'CS02HW0116',
            'CS02HW0216', 'CS02HW0316', 'CS02HW0416', 'CS02HW0516', 'CS02HW0616', 'CS02HW0716', 'CS02HW0816', 'CS02HW0916', 'CS02HW0105', 'CS02HW0205',
            'CS02HW0305', 'CS02HW0405', 'CS02HW0505', 'CS02HW0605', 'CS02HW0705', 'CS02HW0805', 'CS02HW0905', 'CS01HW0305', 'CS01HW0405', 'CS01HW0505',
            'CS01HW0605', 'CS01HW0705', 'CS01HW0805', 'CS01HW0905', 'CS10HW0108', 'CS10HW0208', 'CS10HW0308', 'CS10HW0408', 'CS10HW0508', 'CS10HW0608',
            'CS10HW0708', 'CS10HW0808', 'CS10HW0908', 'CS09HW0106', 'CS09HW0206', 'CS09HW0306', 'CS09HW0406', 'CS09HW0506', 'CS09HW0606', 'CS09HW0706',
            'CS09HW0806', 'CS09HW0906', 'CS10HW0114', 'CS10HW0214', 'CS10HW0314', 'CS10HW0414', 'CS10HW0514', 'CS10HW0614', 'CS10HW0714', 'CS10HW0814',
            'CS10HW0914', 'CS09HW0112', 'CS09HW0212', 'CS09HW0312', 'CS09HW0412', 'CS09HW0512', 'CS09HW0612', 'CS09HW0712', 'CS09HW0812', 'CS09HW0912',
            'CS01HW0309', 'CS01HW0409', 'CS01HW0509', 'CS01HW0609', 'CS01HW0709', 'CS01HW0809', 'CS01HW0909', 'CS02HW0109', 'CS02HW0209', 'CS02HW0309',
            'CS02HW0409', 'CS02HW0509', 'CS02HW0609', 'CS02HW0709', 'CS02HW0809', 'CS02HW0909', 'CS01HW0327', 'CS01HW0427', 'CS01HW0527', 'CS01HW0627',
            'CS01HW0727', 'CS01HW0827', 'CS01HW0927', 'CS02HW0127', 'CS02HW0227', 'CS02HW0327', 'CS02HW0427', 'CS02HW0527', 'CS02HW0627', 'CS02HW0727',
            'CS02HW0827', 'CS02HW0927', 'CS09HW0113', 'CS09HW0213', 'CS09HW0313', 'CS09HW0413', 'CS09HW0513', 'CS09HW0613', 'CS09HW0713', 'CS09HW0813',
            'CS09HW0913', 'CS10HW0115', 'CS10HW0215', 'CS10HW0315', 'CS10HW0415', 'CS10HW0515', 'CS10HW0615', 'CS10HW0715', 'CS10HW0815', 'CS10HW0915',
            'CS09HW0116', 'CS09HW0216', 'CS09HW0316', 'CS09HW0416', 'CS09HW0516', 'CS09HW0616', 'CS09HW0716', 'CS09HW0816', 'CS09HW0916', 'CS10HW0118',
            'CS10HW0218', 'CS10HW0318', 'CS10HW0418', 'CS10HW0518', 'CS10HW0618', 'CS10HW0718', 'CS10HW0818', 'CS10HW0918', 'CS10HW0101', 'CS10HW0201',
            'CS10HW0301', 'CS10HW0401', 'CS10HW0501', 'CS10HW0601', 'CS10HW0701', 'CS10HW0801', 'CS10HW0901', 'CS02HW0125', 'CS02HW0225', 'CS02HW0325',
            'CS02HW0425', 'CS02HW0525', 'CS02HW0625', 'CS02HW0725', 'CS02HW0825', 'CS02HW0925', 'CS01HW0325', 'CS01HW0425', 'CS01HW0525', 'CS01HW0625',
            'CS01HW0725', 'CS01HW0825', 'CS01HW0925', 'CS01HW0311', 'CS01HW0411', 'CS01HW0511', 'CS01HW0611', 'CS01HW0711', 'CS01HW0811', 'CS01HW0911',
            'CS02HW0111', 'CS02HW0211', 'CS02HW0311', 'CS02HW0411', 'CS02HW0511', 'CS02HW0611', 'CS02HW0711', 'CS02HW0811', 'CS02HW0911', 'CS02HW0114',
            'CS02HW0214', 'CS02HW0314', 'CS02HW0414', 'CS02HW0514', 'CS02HW0614', 'CS02HW0714', 'CS02HW0814', 'CS02HW0914', 'CS01HW0314', 'CS01HW0414',
            'CS01HW0514', 'CS01HW0614', 'CS01HW0714', 'CS01HW0814', 'CS01HW0914', 'CS02HW0117', 'CS02HW0217', 'CS02HW0317', 'CS02HW0417', 'CS02HW0517',
            'CS02HW0617', 'CS02HW0717', 'CS02HW0817', 'CS02HW0917', 'CS01HW0317', 'CS01HW0417', 'CS01HW0517', 'CS01HW0617', 'CS01HW0717', 'CS01HW0817',
            'CS01HW0917', 'CS01HW0301', 'CS01HW0401', 'CS01HW0501', 'CS01HW0601', 'CS01HW0701', 'CS01HW0801', 'CS01HW0901', 'CS02HW0101', 'CS02HW0201',
            'CS02HW0301', 'CS02HW0401', 'CS02HW0501', 'CS02HW0601', 'CS02HW0701', 'CS02HW0801', 'CS02HW0901', 'CS02HW0113', 'CS02HW0213', 'CS02HW0313',
            'CS02HW0413', 'CS02HW0513', 'CS02HW0613', 'CS02HW0713', 'CS02HW0813', 'CS02HW0913', 'CS01HW0313', 'CS01HW0413', 'CS01HW0513', 'CS01HW0613',
            'CS01HW0713', 'CS01HW0813', 'CS01HW0913', 'CS02HW0123', 'CS02HW0223', 'CS02HW0323', 'CS02HW0423', 'CS02HW0523', 'CS02HW0623', 'CS02HW0723',
            'CS02HW0823', 'CS02HW0923', 'CS01HW0323', 'CS01HW0423', 'CS01HW0523', 'CS01HW0623', 'CS01HW0723', 'CS01HW0823', 'CS01HW0923', 'CS02HW0102',
            'CS02HW0202', 'CS02HW0302', 'CS02HW0402', 'CS02HW0502', 'CS02HW0602', 'CS02HW0702', 'CS02HW0802', 'CS02HW0902', 'CS01HW0302', 'CS01HW0402',
            'CS01HW0502', 'CS01HW0602', 'CS01HW0702', 'CS01HW0802', 'CS01HW0902', 'CS09HW0115', 'CS09HW0215', 'CS09HW0315', 'CS09HW0415', 'CS09HW0515',
            'CS09HW0615', 'CS09HW0715', 'CS09HW0815', 'CS09HW0915', 'CS10HW0117', 'CS10HW0217', 'CS10HW0317', 'CS10HW0417', 'CS10HW0517', 'CS10HW0617',
            'CS10HW0717', 'CS10HW0817', 'CS10HW0917', 'CS09HW0103', 'CS09HW0203', 'CS09HW0303', 'CS09HW0403', 'CS09HW0503', 'CS09HW0603', 'CS09HW0703',
            'CS09HW0803', 'CS09HW0903', 'CS10HW0105', 'CS10HW0205', 'CS10HW0305', 'CS10HW0405', 'CS10HW0505', 'CS10HW0605', 'CS10HW0705', 'CS10HW0805',
            'CS10HW0905', 'CS01HW0304', 'CS01HW0404', 'CS01HW0504', 'CS01HW0604', 'CS01HW0704', 'CS01HW0804', 'CS01HW0904', 'CS02HW0104', 'CS02HW0204',
            'CS02HW0304', 'CS02HW0404', 'CS02HW0504', 'CS02HW0604', 'CS02HW0704', 'CS02HW0804', 'CS02HW0904', 'CS09HW0110', 'CS09HW0210', 'CS09HW0310',
            'CS09HW0410', 'CS09HW0510', 'CS09HW0610', 'CS09HW0710', 'CS09HW0810', 'CS09HW0910', 'CS10HW0112', 'CS10HW0212', 'CS10HW0312', 'CS10HW0412',
            'CS10HW0512', 'CS10HW0612', 'CS10HW0712', 'CS10HW0812', 'CS10HW0912', 'CS09HW0117', 'CS09HW0217', 'CS09HW0317', 'CS09HW0417', 'CS09HW0517',
            'CS09HW0617', 'CS09HW0717', 'CS09HW0817', 'CS09HW0917', 'CS10HW0119', 'CS10HW0219', 'CS10HW0319', 'CS10HW0419', 'CS10HW0519', 'CS10HW0619',
            'CS10HW0719', 'CS10HW0819', 'CS10HW0919', 'CS01HW0320', 'CS01HW0420', 'CS01HW0520', 'CS01HW0620', 'CS01HW0720', 'CS01HW0820', 'CS01HW0920',
            'CS02HW0120', 'CS02HW0220', 'CS02HW0320', 'CS02HW0420', 'CS02HW0520', 'CS02HW0620', 'CS02HW0720', 'CS02HW0820', 'CS02HW0920', 'CS01HW0328',
            'CS01HW0428', 'CS01HW0528', 'CS01HW0628', 'CS01HW0728', 'CS01HW0828', 'CS01HW0928', 'CS02HW0128', 'CS02HW0228', 'CS02HW0328', 'CS02HW0428',
            'CS02HW0528', 'CS02HW0628', 'CS02HW0728', 'CS02HW0828', 'CS02HW0928', 'CS02HW0118', 'CS02HW0218', 'CS02HW0318', 'CS02HW0418', 'CS02HW0518',
            'CS02HW0618', 'CS02HW0718', 'CS02HW0818', 'CS02HW0918', 'CS01HW0318', 'CS01HW0418', 'CS01HW0518', 'CS01HW0618', 'CS01HW0718', 'CS01HW0818',
            'CS01HW0918', 'CS01HW0306', 'CS01HW0406', 'CS01HW0506', 'CS01HW0606', 'CS01HW0706', 'CS01HW0806', 'CS01HW0906', 'CS02HW0106', 'CS02HW0206',
            'CS02HW0306', 'CS02HW0406', 'CS02HW0506', 'CS02HW0606', 'CS02HW0706', 'CS02HW0806', 'CS02HW0906', 'CS10HW0120', 'CS10HW0220', 'CS10HW0320',
            'CS10HW0420', 'CS10HW0520', 'CS10HW0620', 'CS10HW0720', 'CS10HW0820', 'CS10HW0920', 'CS09HW0118', 'CS09HW0218', 'CS09HW0318', 'CS09HW0418',
            'CS09HW0518', 'CS09HW0618', 'CS09HW0718', 'CS09HW0818', 'CS09HW0918', 'CS02HW0119', 'CS02HW0219', 'CS02HW0319', 'CS02HW0419', 'CS02HW0519',
            'CS02HW0619', 'CS02HW0719', 'CS02HW0819', 'CS02HW0919', 'CS01HW0319', 'CS01HW0419', 'CS01HW0519', 'CS01HW0619', 'CS01HW0719', 'CS01HW0819',
            'CS01HW0919', 'CS02HW0103', 'CS02HW0203', 'CS02HW0303', 'CS02HW0403', 'CS02HW0503', 'CS02HW0603', 'CS02HW0703', 'CS02HW0803', 'CS02HW0903',
            'CS01HW0303', 'CS01HW0403', 'CS01HW0503', 'CS01HW0603', 'CS01HW0703', 'CS01HW0803', 'CS01HW0903', 'CS02HW0121', 'CS02HW0221', 'CS02HW0321',
            'CS02HW0421', 'CS02HW0521', 'CS02HW0621', 'CS02HW0721', 'CS02HW0821', 'CS02HW0921', 'CS01HW0321', 'CS01HW0421', 'CS01HW0521', 'CS01HW0621',
            'CS01HW0721', 'CS01HW0821', 'CS01HW0921', 'CS09HW0104', 'CS09HW0204', 'CS09HW0304', 'CS09HW0404', 'CS09HW0504', 'CS09HW0604', 'CS09HW0704',
            'CS09HW0804', 'CS09HW0904', 'CS10HW0106', 'CS10HW0206', 'CS10HW0306', 'CS10HW0406', 'CS10HW0506', 'CS10HW0606', 'CS10HW0706', 'CS10HW0806',
            'CS10HW0906', 'CS02HW0126', 'CS02HW0226', 'CS02HW0326', 'CS02HW0426', 'CS02HW0526', 'CS02HW0626', 'CS02HW0726', 'CS02HW0826', 'CS02HW0926',
            'CS01HW0326', 'CS01HW0426', 'CS01HW0526', 'CS01HW0626', 'CS01HW0726', 'CS01HW0826', 'CS01HW0926', 'CS10HW0103', 'CS10HW0203', 'CS10HW0303',
            'CS10HW0403', 'CS10HW0503', 'CS10HW0603', 'CS10HW0703', 'CS10HW0803', 'CS10HW0903', 'CS09HW0101', 'CS09HW0201', 'CS09HW0301', 'CS09HW0401',
            'CS09HW0501', 'CS09HW0601', 'CS09HW0701', 'CS09HW0801', 'CS09HW0901', 'CS01HW0308', 'CS01HW0408', 'CS01HW0508', 'CS01HW0608', 'CS01HW0708',
            'CS01HW0808', 'CS01HW0908', 'CS02HW0108', 'CS02HW0208', 'CS02HW0308', 'CS02HW0408', 'CS02HW0508', 'CS02HW0608', 'CS02HW0708', 'CS02HW0808',
            'CS02HW0908', 'CS09HW0111', 'CS09HW0211', 'CS09HW0311', 'CS09HW0411', 'CS09HW0511', 'CS09HW0611', 'CS09HW0711', 'CS09HW0811', 'CS09HW0911',
            'CS10HW0113', 'CS10HW0213', 'CS10HW0313', 'CS10HW0413', 'CS10HW0513', 'CS10HW0613', 'CS10HW0713', 'CS10HW0813', 'CS10HW0913', 'CS10HW0102',
            'CS10HW0202', 'CS10HW0302', 'CS10HW0402', 'CS10HW0502', 'CS10HW0602', 'CS10HW0702', 'CS10HW0802', 'CS10HW0902', 'CS01HW0307', 'CS01HW0407',
            'CS01HW0507', 'CS01HW0607', 'CS01HW0707', 'CS01HW0807', 'CS01HW0907', 'CS02HW0107', 'CS02HW0207', 'CS02HW0307', 'CS02HW0407', 'CS02HW0507',
            'CS02HW0607', 'CS02HW0707', 'CS02HW0807', 'CS02HW0907', 'CS01HW0324', 'CS01HW0424', 'CS01HW0524', 'CS01HW0624', 'CS01HW0724', 'CS01HW0824',
            'CS01HW0924', 'CS02HW0124', 'CS02HW0224', 'CS02HW0324', 'CS02HW0424', 'CS02HW0524', 'CS02HW0624', 'CS02HW0724', 'CS02HW0824', 'CS02HW0924',
            'CS08HW0116', 'CS08HW0216', 'CS08HW0316', 'CS08HW0416', 'CS08HW0516', 'CS08HW0616', 'CS08HW0716', 'CS08HW0816', 'CS08HW0916', 'CS03HW0118',
            'CS03HW0218', 'CS03HW0318', 'CS03HW0418', 'CS03HW0518', 'CS03HW0618', 'CS03HW0718', 'CS03HW0818', 'CS03HW0918', 'CS08HW0112', 'CS08HW0212',
            'CS08HW0312', 'CS08HW0412', 'CS08HW0512', 'CS08HW0612', 'CS08HW0712', 'CS08HW0812', 'CS08HW0912', 'CS03HW0117', 'CS03HW0217', 'CS03HW0317',
            'CS03HW0417', 'CS03HW0517', 'CS03HW0617', 'CS03HW0717', 'CS03HW0817', 'CS03HW0917', 'CS08HW0113', 'CS08HW0213', 'CS08HW0313', 'CS08HW0413',
            'CS08HW0513', 'CS08HW0613', 'CS08HW0713', 'CS08HW0813', 'CS08HW0913', 'CS03HW0124', 'CS03HW0224', 'CS03HW0324', 'CS03HW0424', 'CS03HW0524',
            'CS03HW0624', 'CS03HW0724', 'CS03HW0824', 'CS03HW0924', 'CS03HW0105', 'CS03HW0205', 'CS03HW0305', 'CS03HW0405', 'CS03HW0505', 'CS03HW0605',
            'CS03HW0705', 'CS03HW0805', 'CS03HW0905', 'CS03HW0125', 'CS03HW0225', 'CS03HW0325', 'CS03HW0425', 'CS03HW0525', 'CS03HW0625', 'CS03HW0725',
            'CS03HW0825', 'CS03HW0925', 'CS08HW0109', 'CS08HW0209', 'CS08HW0309', 'CS08HW0409', 'CS08HW0509', 'CS08HW0609', 'CS08HW0709', 'CS08HW0809',
            'CS08HW0909', 'CS03HW0119', 'CS03HW0219', 'CS03HW0319', 'CS03HW0419', 'CS03HW0519', 'CS03HW0619', 'CS03HW0719', 'CS03HW0819', 'CS03HW0919',
            'CS08HW0101', 'CS08HW0201', 'CS08HW0301', 'CS08HW0401', 'CS08HW0501', 'CS08HW0601', 'CS08HW0701', 'CS08HW0801', 'CS08HW0901', 'CS08HW0117',
            'CS08HW0217', 'CS08HW0317', 'CS08HW0417', 'CS08HW0517', 'CS08HW0617', 'CS08HW0717', 'CS08HW0817', 'CS08HW0917', 'CS03HW0127', 'CS03HW0227',
            'CS03HW0327', 'CS03HW0427', 'CS03HW0527', 'CS03HW0627', 'CS03HW0727', 'CS03HW0827', 'CS03HW0927', 'CS03HW0123', 'CS03HW0223', 'CS03HW0323',
            'CS03HW0423', 'CS03HW0523', 'CS03HW0623', 'CS03HW0723', 'CS03HW0823', 'CS03HW0923', 'CS03HW0120', 'CS03HW0220', 'CS03HW0320', 'CS03HW0420',
            'CS03HW0520', 'CS03HW0620', 'CS03HW0720', 'CS03HW0820', 'CS03HW0920', 'CS03HW0113', 'CS03HW0213', 'CS03HW0313', 'CS03HW0413', 'CS03HW0513',
            'CS03HW0613', 'CS03HW0713', 'CS03HW0813', 'CS03HW0913', 'CS03HW0121', 'CS03HW0221', 'CS03HW0321', 'CS03HW0421', 'CS03HW0521', 'CS03HW0621',
            'CS03HW0721', 'CS03HW0821', 'CS03HW0921', 'CS03HW0114', 'CS03HW0214', 'CS03HW0314', 'CS03HW0414', 'CS03HW0514', 'CS03HW0614', 'CS03HW0714',
            'CS03HW0814', 'CS03HW0914', 'CS08HW0108', 'CS08HW0208', 'CS08HW0308', 'CS08HW0408', 'CS08HW0508', 'CS08HW0608', 'CS08HW0708', 'CS08HW0808',
            'CS08HW0908', 'CS08HW0103', 'CS08HW0203', 'CS08HW0303', 'CS08HW0403', 'CS08HW0503', 'CS08HW0603', 'CS08HW0703', 'CS08HW0803', 'CS08HW0903',
            'CS08HW0118', 'CS08HW0218', 'CS08HW0318', 'CS08HW0418', 'CS08HW0518', 'CS08HW0618', 'CS08HW0718', 'CS08HW0818', 'CS08HW0918', 'CS03HW0110',
            'CS03HW0210', 'CS03HW0310', 'CS03HW0410', 'CS03HW0510', 'CS03HW0610', 'CS03HW0710', 'CS03HW0810', 'CS03HW0910', 'CS03HW0126', 'CS03HW0226',
            'CS03HW0326', 'CS03HW0426', 'CS03HW0526', 'CS03HW0626', 'CS03HW0726', 'CS03HW0826', 'CS03HW0926', 'CS03HW0122', 'CS03HW0222', 'CS03HW0322',
            'CS03HW0422', 'CS03HW0522', 'CS03HW0622', 'CS03HW0722', 'CS03HW0822', 'CS03HW0922', 'CS03HW0107', 'CS03HW0207', 'CS03HW0307', 'CS03HW0407',
            'CS03HW0507', 'CS03HW0607', 'CS03HW0707', 'CS03HW0807', 'CS03HW0907', 'CS08HW0102', 'CS08HW0202', 'CS08HW0302', 'CS08HW0402', 'CS08HW0502',
            'CS08HW0602', 'CS08HW0702', 'CS08HW0802', 'CS08HW0902', 'CS03HW0101', 'CS03HW0201', 'CS03HW0301', 'CS03HW0401', 'CS03HW0501', 'CS03HW0601',
            'CS03HW0701', 'CS03HW0801', 'CS03HW0901', 'CS03HW0109', 'CS03HW0209', 'CS03HW0309', 'CS03HW0409', 'CS03HW0509', 'CS03HW0609', 'CS03HW0709',
            'CS03HW0809', 'CS03HW0909', 'CS08HW0111', 'CS08HW0211', 'CS08HW0311', 'CS08HW0411', 'CS08HW0511', 'CS08HW0611', 'CS08HW0711', 'CS08HW0811',
            'CS08HW0911', 'CS08HW0105', 'CS08HW0205', 'CS08HW0305', 'CS08HW0405', 'CS08HW0505', 'CS08HW0605', 'CS08HW0705', 'CS08HW0805', 'CS08HW0905',
            'CS08HW0114', 'CS08HW0214', 'CS08HW0314', 'CS08HW0414', 'CS08HW0514', 'CS08HW0614', 'CS08HW0714', 'CS08HW0814', 'CS08HW0914', 'CS08HW0104',
            'CS08HW0204', 'CS08HW0304', 'CS08HW0404', 'CS08HW0504', 'CS08HW0604', 'CS08HW0704', 'CS08HW0804', 'CS08HW0904', 'CS03HW0104', 'CS03HW0204',
            'CS03HW0304', 'CS03HW0404', 'CS03HW0504', 'CS03HW0604', 'CS03HW0704', 'CS03HW0804', 'CS03HW0904', 'CS03HW0112', 'CS03HW0212', 'CS03HW0312',
            'CS03HW0412', 'CS03HW0512', 'CS03HW0612', 'CS03HW0712', 'CS03HW0812', 'CS03HW0912', 'CS03HW0111', 'CS03HW0211', 'CS03HW0311', 'CS03HW0411',
            'CS03HW0511', 'CS03HW0611', 'CS03HW0711', 'CS03HW0811', 'CS03HW0911', 'CS08HW0110', 'CS08HW0210', 'CS08HW0310', 'CS08HW0410', 'CS08HW0510',
            'CS08HW0610', 'CS08HW0710', 'CS08HW0810', 'CS08HW0910', 'CS03HW0115', 'CS03HW0215', 'CS03HW0315', 'CS03HW0415', 'CS03HW0515', 'CS03HW0615',
            'CS03HW0715', 'CS03HW0815', 'CS03HW0915', 'CS08HW0106', 'CS08HW0206', 'CS08HW0306', 'CS08HW0406', 'CS08HW0506', 'CS08HW0606', 'CS08HW0706',
            'CS08HW0806', 'CS08HW0906', 'CS08HW0115', 'CS08HW0215', 'CS08HW0315', 'CS08HW0415', 'CS08HW0515', 'CS08HW0615', 'CS08HW0715', 'CS08HW0815',
            'CS08HW0915', 'CS08HW0107', 'CS08HW0207', 'CS08HW0307', 'CS08HW0407', 'CS08HW0507', 'CS08HW0607', 'CS08HW0707', 'CS08HW0807', 'CS08HW0907',
            'CS03HW0103', 'CS03HW0203', 'CS03HW0303', 'CS03HW0403', 'CS03HW0503', 'CS03HW0603', 'CS03HW0703', 'CS03HW0803', 'CS03HW0903', 'CS08HW0120',
            'CS08HW0220', 'CS08HW0320', 'CS08HW0420', 'CS08HW0520', 'CS08HW0620', 'CS08HW0720', 'CS08HW0820', 'CS08HW0920', 'CS08HW0119', 'CS08HW0219',
            'CS08HW0319', 'CS08HW0419', 'CS08HW0519', 'CS08HW0619', 'CS08HW0719', 'CS08HW0819', 'CS08HW0919', 'CS03HW0102', 'CS03HW0202', 'CS03HW0302',
            'CS03HW0402', 'CS03HW0502', 'CS03HW0602', 'CS03HW0702', 'CS03HW0802', 'CS03HW0902', 'CS03HW0106', 'CS03HW0206', 'CS03HW0306', 'CS03HW0406',
            'CS03HW0506', 'CS03HW0606', 'CS03HW0706', 'CS03HW0806', 'CS03HW0906', 'CS03HW0116', 'CS03HW0216', 'CS03HW0316', 'CS03HW0416', 'CS03HW0516',
            'CS03HW0616', 'CS03HW0716', 'CS03HW0816', 'CS03HW0916', 'CS03HW0108', 'CS03HW0208', 'CS03HW0308', 'CS03HW0408', 'CS03HW0508', 'CS03HW0608',
            'CS03HW0708', 'CS03HW0808', 'CS03HW0908', 'CS03HW0128', 'CS03HW0228', 'CS03HW0328', 'CS03HW0428', 'CS03HW0528', 'CS03HW0628', 'CS03HW0728',
            'CS03HW0828', 'CS03HW0928', 'CS06HW0119', 'CS06HW0219', 'CS06HW0319', 'CS06HW0419', 'CS06HW0519', 'CS06HW0619', 'CS06HW0719', 'CS06HW0819',
            'CS06HW0919', 'CS07HW0119', 'CS07HW0219', 'CS07HW0319', 'CS07HW0419', 'CS07HW0519', 'CS07HW0619', 'CS07HW0719', 'CS07HW0819', 'CS07HW0919',
            'CS05HW0128', 'CS05HW0228', 'CS05HW0328', 'CS05HW0428', 'CS05HW0528', 'CS05HW0628', 'CS05HW0728', 'CS05HW0828', 'CS05HW0928', 'CS04HW0128',
            'CS04HW0228', 'CS04HW0328', 'CS04HW0428', 'CS04HW0528', 'CS04HW0628', 'CS04HW0728', 'CS04HW0828', 'CS04HW0928', 'HJ0270HW0101', 'HJ0282HW0101',
            'CS05HW0410', 'CS05HW0510', 'CS05HW0610', 'CS05HW0710', 'CS05HW0810', 'CS05HW0910', 'CS04HW0110', 'CS04HW0210', 'CS04HW0310', 'CS04HW0410',
            'CS04HW0510', 'CS04HW0610', 'CS04HW0710', 'CS04HW0810', 'CS04HW0910', 'CS06HW0101', 'CS06HW0201', 'CS06HW0301', 'CS06HW0401', 'CS06HW0501',
            'CS06HW0601', 'CS06HW0701', 'CS06HW0801', 'CS06HW0901', 'CS07HW0101', 'CS07HW0201', 'CS07HW0301', 'CS07HW0401', 'CS07HW0501', 'CS07HW0601',
            'CS07HW0701', 'CS07HW0801', 'CS07HW0901', 'CS05HW0126', 'CS05HW0226', 'CS05HW0326', 'CS05HW0426', 'CS05HW0526', 'CS05HW0626', 'CS05HW0726',
            'CS05HW0826', 'CS05HW0926', 'CS04HW0126', 'CS04HW0226', 'CS04HW0326', 'CS04HW0426', 'CS04HW0526', 'CS04HW0626', 'CS04HW0726', 'CS04HW0826',
            'CS04HW0926', 'CS04HW0106', 'CS04HW0206', 'CS04HW0306', 'CS04HW0406', 'CS04HW0506', 'CS04HW0606', 'CS04HW0706', 'CS04HW0806', 'CS04HW0906',
            'HJ0266HW0101', 'HJ0278HW0101', 'CS05HW0406', 'CS05HW0506', 'CS05HW0606', 'CS05HW0706', 'CS05HW0806', 'CS05HW0906', 'HJ0263HW0101', 'HJ0275HW0101',
            'CS05HW0403', 'CS05HW0503', 'CS05HW0603', 'CS05HW0703', 'CS05HW0803', 'CS05HW0903', 'CS04HW0103', 'CS04HW0203', 'CS04HW0303', 'CS04HW0403',
            'CS04HW0503', 'CS04HW0603', 'CS04HW0703', 'CS04HW0803', 'CS04HW0903', 'CS06HW0111', 'CS06HW0211', 'CS06HW0311', 'CS06HW0411', 'CS06HW0511',
            'CS06HW0611', 'CS06HW0711', 'CS06HW0811', 'CS06HW0911', 'CS07HW0111', 'CS07HW0211', 'CS07HW0311', 'CS07HW0411', 'CS07HW0511', 'CS07HW0611',
            'CS07HW0711', 'CS07HW0811', 'CS07HW0911', 'CS05HW0113', 'CS05HW0213', 'CS05HW0313', 'CS05HW0413', 'CS05HW0513', 'CS05HW0613', 'CS05HW0713',
            'CS05HW0813', 'CS05HW0913', 'CS04HW0113', 'CS04HW0213', 'CS04HW0313', 'CS04HW0413', 'CS04HW0513', 'CS04HW0613', 'CS04HW0713', 'CS04HW0813',
            'CS04HW0913', 'CS07HW0102', 'CS07HW0202', 'CS07HW0302', 'CS07HW0402', 'CS07HW0502', 'CS07HW0602', 'CS07HW0702', 'CS07HW0802', 'CS07HW0902',
            'CS06HW0102', 'CS06HW0202', 'CS06HW0302', 'CS06HW0402', 'CS06HW0502', 'CS06HW0602', 'CS06HW0702', 'CS06HW0802', 'CS06HW0902', 'HJ0265HW0101',
            'HJ0277HW0101', 'CS05HW0405', 'CS05HW0505', 'CS05HW0605', 'CS05HW0705', 'CS05HW0805', 'CS05HW0905', 'CS04HW0105', 'CS04HW0205', 'CS04HW0305',
            'CS04HW0405', 'CS04HW0505', 'CS04HW0605', 'CS04HW0705', 'CS04HW0805', 'CS04HW0905', 'CS06HW0112', 'CS06HW0212', 'CS06HW0312', 'CS06HW0412',
            'CS06HW0512', 'CS06HW0612', 'CS06HW0712', 'CS06HW0812', 'CS06HW0912', 'CS07HW0112', 'CS07HW0212', 'CS07HW0312', 'CS07HW0412', 'CS07HW0512',
            'CS07HW0612', 'CS07HW0712', 'CS07HW0812', 'CS07HW0912', 'CS06HW0108', 'CS06HW0208', 'CS06HW0308', 'CS06HW0408', 'CS06HW0508', 'CS06HW0608',
            'CS06HW0708', 'CS06HW0808', 'CS06HW0908', 'CS07HW0108', 'CS07HW0208', 'CS07HW0308', 'CS07HW0408', 'CS07HW0508', 'CS07HW0608', 'CS07HW0708',
            'CS07HW0808', 'CS07HW0908', 'CS05HW0120', 'CS05HW0220', 'CS05HW0320', 'CS05HW0420', 'CS05HW0520', 'CS05HW0620', 'CS05HW0720', 'CS05HW0820',
            'CS05HW0920', 'CS04HW0120', 'CS04HW0220', 'CS04HW0320', 'CS04HW0420', 'CS04HW0520', 'CS04HW0620', 'CS04HW0720', 'CS04HW0820', 'CS04HW0920',
            'CS04HW0122', 'CS04HW0222', 'CS04HW0322', 'CS04HW0422', 'CS04HW0522', 'CS04HW0622', 'CS04HW0722', 'CS04HW0822', 'CS04HW0922', 'CS05HW0122',
            'CS05HW0222', 'CS05HW0322', 'CS05HW0422', 'CS05HW0522', 'CS05HW0622', 'CS05HW0722', 'CS05HW0822', 'CS05HW0922', 'CS06HW0104', 'CS06HW0204',
            'CS06HW0304', 'CS06HW0404', 'CS06HW0504', 'CS06HW0604', 'CS06HW0704', 'CS06HW0804', 'CS06HW0904', 'CS07HW0104', 'CS07HW0204', 'CS07HW0304',
            'CS07HW0404', 'CS07HW0504', 'CS07HW0604', 'CS07HW0704', 'CS07HW0804', 'CS07HW0904', 'CS04HW0114', 'CS04HW0214', 'CS04HW0314', 'CS04HW0414',
            'CS04HW0514', 'CS04HW0614', 'CS04HW0714', 'CS04HW0814', 'CS04HW0914', 'CS05HW0114', 'CS05HW0214', 'CS05HW0314', 'CS05HW0414', 'CS05HW0514',
            'CS05HW0614', 'CS05HW0714', 'CS05HW0814', 'CS05HW0914', 'CS05HW0118', 'CS05HW0218', 'CS05HW0318', 'CS05HW0418', 'CS05HW0518', 'CS05HW0618',
            'CS05HW0718', 'CS05HW0818', 'CS05HW0918', 'CS04HW0118', 'CS04HW0218', 'CS04HW0318', 'CS04HW0418', 'CS04HW0518', 'CS04HW0618', 'CS04HW0718',
            'CS04HW0818', 'CS04HW0918', 'CS06HW0109', 'CS06HW0209', 'CS06HW0309', 'CS06HW0409', 'CS06HW0509', 'CS06HW0609', 'CS06HW0709', 'CS06HW0809',
            'CS06HW0909', 'CS07HW0109', 'CS07HW0209', 'CS07HW0309', 'CS07HW0409', 'CS07HW0509', 'CS07HW0609', 'CS07HW0709', 'CS07HW0809', 'CS07HW0909',
            'CS04HW0107', 'CS04HW0207', 'CS04HW0307', 'CS04HW0407', 'CS04HW0507', 'CS04HW0607', 'CS04HW0707', 'CS04HW0807', 'CS04HW0907', 'HJ0267HW0101',
            'HJ0279HW0101', 'CS05HW0407', 'CS05HW0507', 'CS05HW0607', 'CS05HW0707', 'CS05HW0807', 'CS05HW0907', 'CS04HW0112', 'CS04HW0212', 'CS04HW0312',
            'CS04HW0412', 'CS04HW0512', 'CS04HW0612', 'CS04HW0712', 'CS04HW0812', 'CS04HW0912', 'HJ0272HW0101', 'HJ0284HW0101', 'CS05HW0412', 'CS05HW0512',
            'CS05HW0612', 'CS05HW0712', 'CS05HW0812', 'CS05HW0912', 'HJ0268HW0101', 'HJ0280HW0101', 'CS05HW0408', 'CS05HW0508', 'CS05HW0608', 'CS05HW0708',
            'CS05HW0808', 'CS05HW0908', 'CS04HW0108', 'CS04HW0208', 'CS04HW0308', 'CS04HW0408', 'CS04HW0508', 'CS04HW0608', 'CS04HW0708', 'CS04HW0808',
            'CS04HW0908', 'CS06HW0114', 'CS06HW0214', 'CS06HW0314', 'CS06HW0414', 'CS06HW0514', 'CS06HW0614', 'CS06HW0714', 'CS06HW0814', 'CS06HW0914',
            'CS07HW0114', 'CS07HW0214', 'CS07HW0314', 'CS07HW0414', 'CS07HW0514', 'CS07HW0614', 'CS07HW0714', 'CS07HW0814', 'CS07HW0914', 'CS05HW0124',
            'CS05HW0224', 'CS05HW0324', 'CS05HW0424', 'CS05HW0524', 'CS05HW0624', 'CS05HW0724', 'CS05HW0824', 'CS05HW0924', 'CS04HW0124', 'CS04HW0224',
            'CS04HW0324', 'CS04HW0424', 'CS04HW0524', 'CS04HW0624', 'CS04HW0724', 'CS04HW0824', 'CS04HW0924', 'CS07HW0113', 'CS07HW0213', 'CS07HW0313',
            'CS07HW0413', 'CS07HW0513', 'CS07HW0613', 'CS07HW0713', 'CS07HW0813', 'CS07HW0913', 'CS06HW0113', 'CS06HW0213', 'CS06HW0313', 'CS06HW0413',
            'CS06HW0513', 'CS06HW0613', 'CS06HW0713', 'CS06HW0813', 'CS06HW0913', 'CS04HW0127', 'CS04HW0227', 'CS04HW0327', 'CS04HW0427', 'CS04HW0527',
            'CS04HW0627', 'CS04HW0727', 'CS04HW0827', 'CS04HW0927', 'CS05HW0127', 'CS05HW0227', 'CS05HW0327', 'CS05HW0427', 'CS05HW0527', 'CS05HW0627',
            'CS05HW0727', 'CS05HW0827', 'CS05HW0927', 'CS05HW0119', 'CS05HW0219', 'CS05HW0319', 'CS05HW0419', 'CS05HW0519', 'CS05HW0619', 'CS05HW0719',
            'CS05HW0819', 'CS05HW0919', 'CS04HW0119', 'CS04HW0219', 'CS04HW0319', 'CS04HW0419', 'CS04HW0519', 'CS04HW0619', 'CS04HW0719', 'CS04HW0819',
            'CS04HW0919', 'CS06HW0105', 'CS06HW0205', 'CS06HW0305', 'CS06HW0405', 'CS06HW0505', 'CS06HW0605', 'CS06HW0705', 'CS06HW0805', 'CS06HW0905',
            'CS07HW0105', 'CS07HW0205', 'CS07HW0305', 'CS07HW0405', 'CS07HW0505', 'CS07HW0605', 'CS07HW0705', 'CS07HW0805', 'CS07HW0905', 'CS05HW0121',
            'CS05HW0221', 'CS05HW0321', 'CS05HW0421', 'CS05HW0521', 'CS05HW0621', 'CS05HW0721', 'CS05HW0821', 'CS05HW0921', 'CS04HW0121', 'CS04HW0221',
            'CS04HW0321', 'CS04HW0421', 'CS04HW0521', 'CS04HW0621', 'CS04HW0721', 'CS04HW0821', 'CS04HW0921', 'CS07HW0120', 'CS07HW0220', 'CS07HW0320',
            'CS07HW0420', 'CS07HW0520', 'CS07HW0620', 'CS07HW0720', 'CS07HW0820', 'CS07HW0920', 'CS06HW0120', 'CS06HW0220', 'CS06HW0320', 'CS06HW0420',
            'CS06HW0520', 'CS06HW0620', 'CS06HW0720', 'CS06HW0820', 'CS06HW0920', 'HJ0262HW0101', 'HJ0274HW0101', 'CS05HW0402', 'CS05HW0502', 'CS05HW0602',
            'CS05HW0702', 'CS05HW0802', 'CS05HW0902', 'CS04HW0102', 'CS04HW0202', 'CS04HW0302', 'CS04HW0402', 'CS04HW0502', 'CS04HW0602', 'CS04HW0702',
            'CS04HW0802', 'CS04HW0902', 'HJ0269HW0101', 'HJ0281HW0101', 'CS05HW0409', 'CS05HW0509', 'CS05HW0609', 'CS05HW0709', 'CS05HW0809', 'CS05HW0909',
            'CS04HW0109', 'CS04HW0209', 'CS04HW0309', 'CS04HW0409', 'CS04HW0509', 'CS04HW0609', 'CS04HW0709', 'CS04HW0809', 'CS04HW0909', 'CS04HW0125',
            'CS04HW0225', 'CS04HW0325', 'CS04HW0425', 'CS04HW0525', 'CS04HW0625', 'CS04HW0725', 'CS04HW0825', 'CS04HW0925', 'CS05HW0125', 'CS05HW0225',
            'CS05HW0325', 'CS05HW0425', 'CS05HW0525', 'CS05HW0625', 'CS05HW0725', 'CS05HW0825', 'CS05HW0925', 'CS04HW0115', 'CS04HW0215', 'CS04HW0315',
            'CS04HW0415', 'CS04HW0515', 'CS04HW0615', 'CS04HW0715', 'CS04HW0815', 'CS04HW0915', 'CS05HW0115', 'CS05HW0215', 'CS05HW0315', 'CS05HW0415',
            'CS05HW0515', 'CS05HW0615', 'CS05HW0715', 'CS05HW0815', 'CS05HW0915', 'CS07HW0115', 'CS07HW0215', 'CS07HW0315', 'CS07HW0415', 'CS07HW0515',
            'CS07HW0615', 'CS07HW0715', 'CS07HW0815', 'CS07HW0915', 'CS06HW0115', 'CS06HW0215', 'CS06HW0315', 'CS06HW0415', 'CS06HW0515', 'CS06HW0615',
            'CS06HW0715', 'CS06HW0815', 'CS06HW0915', 'CS05HW0117', 'CS05HW0217', 'CS05HW0317', 'CS05HW0417', 'CS05HW0517', 'CS05HW0617', 'CS05HW0717',
            'CS05HW0817', 'CS05HW0917', 'CS04HW0117', 'CS04HW0217', 'CS04HW0317', 'CS04HW0417', 'CS04HW0517', 'CS04HW0617', 'CS04HW0717', 'CS04HW0817',
            'CS04HW0917', 'CS06HW0107', 'CS06HW0207', 'CS06HW0307', 'CS06HW0407', 'CS06HW0507', 'CS06HW0607', 'CS06HW0707', 'CS06HW0807', 'CS06HW0907',
            'CS07HW0107', 'CS07HW0207', 'CS07HW0307', 'CS07HW0407', 'CS07HW0507', 'CS07HW0607', 'CS07HW0707', 'CS07HW0807', 'CS07HW0907', 'HJ0261HW0101',
            'HJ0273HW0101', 'CS05HW0401', 'CS05HW0501', 'CS05HW0601', 'CS05HW0701', 'CS05HW0801', 'CS05HW0901', 'CS04HW0101', 'CS04HW0201', 'CS04HW0301',
            'CS04HW0401', 'CS04HW0501', 'CS04HW0601', 'CS04HW0701', 'CS04HW0801', 'CS04HW0901', 'CS05HW0123', 'CS05HW0223', 'CS05HW0323', 'CS05HW0423',
            'CS05HW0523', 'CS05HW0623', 'CS05HW0723', 'CS05HW0823', 'CS05HW0923', 'CS04HW0123', 'CS04HW0223', 'CS04HW0323', 'CS04HW0423', 'CS04HW0523',
            'CS04HW0623', 'CS04HW0723', 'CS04HW0823', 'CS04HW0923', 'CS05HW0116', 'CS05HW0216', 'CS05HW0316', 'CS05HW0416', 'CS05HW0516', 'CS05HW0616',
            'CS05HW0716', 'CS05HW0816', 'CS05HW0916', 'CS04HW0116', 'CS04HW0216', 'CS04HW0316', 'CS04HW0416', 'CS04HW0516', 'CS04HW0616', 'CS04HW0716',
            'CS04HW0816', 'CS04HW0916', 'CS07HW0118', 'CS07HW0218', 'CS07HW0318', 'CS07HW0418', 'CS07HW0518', 'CS07HW0618', 'CS07HW0718', 'CS07HW0818',
            'CS07HW0918', 'CS06HW0118', 'CS06HW0218', 'CS06HW0318', 'CS06HW0418', 'CS06HW0518', 'CS06HW0618', 'CS06HW0718', 'CS06HW0818', 'CS06HW0918',
            'CS07HW0103', 'CS07HW0203', 'CS07HW0303', 'CS07HW0403', 'CS07HW0503', 'CS07HW0603', 'CS07HW0703', 'CS07HW0803', 'CS07HW0903', 'CS06HW0103',
            'CS06HW0203', 'CS06HW0303', 'CS06HW0403', 'CS06HW0503', 'CS06HW0603', 'CS06HW0703', 'CS06HW0803', 'CS06HW0903', 'CS06HW0117', 'CS06HW0217',
            'CS06HW0317', 'CS06HW0417', 'CS06HW0517', 'CS06HW0617', 'CS06HW0717', 'CS06HW0817', 'CS06HW0917', 'CS07HW0117', 'CS07HW0217', 'CS07HW0317',
            'CS07HW0417', 'CS07HW0517', 'CS07HW0617', 'CS07HW0717', 'CS07HW0817', 'CS07HW0917', 'CS06HW0110', 'CS06HW0210', 'CS06HW0310', 'CS06HW0410',
            'CS06HW0510', 'CS06HW0610', 'CS06HW0710', 'CS06HW0810', 'CS06HW0910', 'CS07HW0110', 'CS07HW0210', 'CS07HW0310', 'CS07HW0410', 'CS07HW0510',
            'CS07HW0610', 'CS07HW0710', 'CS07HW0810', 'CS07HW0910', 'CS07HW0106', 'CS07HW0206', 'CS07HW0306', 'CS07HW0406', 'CS07HW0506', 'CS07HW0606',
            'CS07HW0706', 'CS07HW0806', 'CS07HW0906', 'CS06HW0106', 'CS06HW0206', 'CS06HW0306', 'CS06HW0406', 'CS06HW0506', 'CS06HW0606', 'CS06HW0706',
            'CS06HW0806', 'CS06HW0906', 'CS06HW0116', 'CS06HW0216', 'CS06HW0316', 'CS06HW0416', 'CS06HW0516', 'CS06HW0616', 'CS06HW0716', 'CS06HW0816',
            'CS06HW0916', 'CS07HW0116', 'CS07HW0216', 'CS07HW0316', 'CS07HW0416', 'CS07HW0516', 'CS07HW0616', 'CS07HW0716', 'CS07HW0816', 'CS07HW0916',
            'HJ0271HW0101', 'HJ0283HW0101', 'CS05HW0411', 'CS05HW0511', 'CS05HW0611', 'CS05HW0711', 'CS05HW0811', 'CS05HW0911', 'CS04HW0111', 'CS04HW0211',
            'CS04HW0311', 'CS04HW0411', 'CS04HW0511', 'CS04HW0611', 'CS04HW0711', 'CS04HW0811', 'CS04HW0911', 'CS04HW0104', 'CS04HW0204', 'CS04HW0304',
            'CS04HW0404', 'CS04HW0504', 'CS04HW0604', 'CS04HW0704', 'CS04HW0804', 'CS04HW0904', 'HJ0264HW0101', 'HJ0276HW0101', 'CS05HW0404', 'CS05HW0504',
            'CS05HW0604', 'CS05HW0704', 'CS05HW0804', 'CS05HW0904'],
           'busi3':['HJ0272HW0101', 'HJ0284HW0101', 'HJ0266HW0101', 'HJ0278HW0101', 'HJ0271HW0101', 'HJ0283HW0101', 'HJ0270HW0101', 'HJ0282HW0101', 'HJ0265HW0101', 'HJ0277HW0101',
            'HJ0269HW0101', 'HJ0281HW0101', 'HJ0268HW0101', 'HJ0280HW0101', 'HJ0263HW0101', 'HJ0275HW0101', 'HJ0262HW0101', 'HJ0274HW0101', 'HJ0261HW0101', 'HJ0273HW0101',
            'HJ0267HW0101', 'HJ0279HW0101', 'HJ0264HW0101', 'HJ0276HW0101'
                    ]
           }
buss_area2={
      'A':{'AP774': 'LM1194', 'AP896': 'LM1193', 'AP776': 'LM1192', 'AP897': 'LM1191', 'AP777': 'LM1190',
            'AP898': 'LM1189', 'AP778': 'LM1188', 'AP899': 'LM1187', 'AP547': 'LM1186', 'AP1109': 'LM1185',
            'AP546': 'LM1184', 'AP1110': 'LM1183', 'AP543': 'LM1182', 'AP1111': 'LM1181', 'AP542': 'LM1180',
            'AP1112': 'LM1179', 'AP502': 'LM1137', 'AP504': 'LM1138', 'AP499': 'LM1139', 'AP498': 'LM1140'},
      'B':{'AP940': 'LM631', 'AP1350': 'LM631', 'AP1351': 'LM632', 'AP941': 'LM632', 'AP1352': 'LM633',
            'AP942': 'LM633', 'AP1353': 'LM634', 'AP943': 'LM634', 'AP1354': 'LM635', 'AP944': 'LM635'}
}
buss_area={
      'A':['AP774', 'AP896', 'AP776', 'AP897', 'AP777'],
      'B':['AP940', 'AP1350', 'AP1351', 'AP941', 'AP1352',
            'AP942', 'AP1353', 'AP943', 'AP1354', 'AP944']
}

class SingletonMetaClass(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(SingletonMetaClass, cls).__call__(*args, **kwargs)
        return cls._instances[cls]
class CoreUtil(metaclass=SingletonMetaClass):
    """"""
    def __init__(self,ip:str=""):
        """"""
        # self.ip = cg.ip if ip is None else ip
        self.ip = "http://127.0.0.1:8088"
    def getOrderState(self,oid):
        """查询运单状态，返回状态和动作"""
        r = requests.get(self.ip + "/orderDetails/" + oid).json()
        return r.get('state'), r.get('keyTask'),r.get('blocks')[-1]['blockId']

    def setShareOrder(self, **kwargs) -> str:
        """下发标准仿真拼合运单,货物类型暂时支持10种
        :param kwargs:
            loc  load,unload任务位置
            operation load,unload,zero(复位),change(交换背篓)
            changePosition0 change位置1
            changePosition1 change位置2
            goodsId 货物id
            selfPosition 放货位置,注意是背篓位置
            priority 优先级
            goodsType 货物类型
        """
        oid = kwargs.get('oid')
        json_d = {
            'id': oid,
            'keyRoute': kwargs.get('loc'),
            'complete': True,
            'priority': kwargs.get('priority'),
            'vehicle': kwargs.get('vehicle'),
            'keyTask': kwargs.get('operation'),
            'blocks': [
                {
                    'blockId': kwargs.get('goodsType')+oid + ':01',
                    'location': kwargs.get('loc'),
                    "operation": "script",
                    "script_name": "ctuNoBlock.py",
                    "script_args": {
                        "operation": kwargs.get('operation')
                    }
                }
            ]
        }
        if kwargs.get('operation') == 'change':
            json_d['blocks'][0]['script_args']['changePosition0'] = kwargs.get('changePosition0')
            json_d['blocks'][0]['script_args']['changePosition1'] = kwargs.get('changePosition1')
        if kwargs.get('keyGoodsID') is not None:
            json_d['blocks'][0]['keyGoodsId'] = kwargs.get('keyGoodsID')
        else:
            if kwargs.get('operation') == 'load' or kwargs.get('operation') == 'unload':
                json_d['blocks'][0]['goodsId'] = kwargs.get('goodsId') if kwargs.get('goodsId') else oid
                if kwargs.get('selfPosition'):
                    json_d['blocks'][0]['script_args']['selfPosition'] = kwargs.get('selfPosition')
        res = requests.post(url=f"{cg.ip}/setOrder", json=json_d, timeout=10)
        return oid

    def get_contaioners_data(vehicle) -> list:
        """
        查询机器人容器状态 - 针对料箱车的
        :return:
        """
        r = requests.get(cg.ip + f"/robotsStatus?vehicles={vehicle}").json()
        return r['report'][0]['rbk_report']['containers']

    def get_robot_current_order(vehicle):
        """
        目前来看，是针对顶升车和叉车的，查询机器人
        :return:
        """
        r = requests.get(cg.ip + f"/robotsStatus?vehicles={vehicle}").json()
        return r['report'][0]['current_order']

    def set_operation_time(self,vehicle:str,operation: Union[str,list[str]]="ForkLoad",t: Union[float,list]=10):
        """设置仿真机器人动作延迟，
        需要241129之后的版本
        """
        match operation:
            case str():
                data = {
                    'vehicle_id': vehicle,
                    'operation_time': json.dumps([{
                        'operation': operation,
                        'time': t
                    }])
                }
            case list():
                data = {
                    'vehicle_id': vehicle,
                    'operation_time': json.dumps(
                        [{'operation': op, 'time': ti} for op, ti in zip(operation, t)]
                    )
                }
            case _:
                raise TypeError('operation 参数必须为 str 或 list 类型')
        return requests.post(f"{self.ip}/updateSimRobotState", json.dumps(data)).json()

    def modifyParamNew(self, data):
        """
        新版本的core，用http设置参数
        """
        r = requests.post(self.ip+"/saveCoreParam", json = data)
        print(r.content)
class Bins():
    """库位管理"""
    def __init__(self,data=None):
        # self.bindata = namedtuple('bindata', ['bin', 'prebin', 'hasGoods', 'lockId', 'autoAdd', 'autoClear','timestamp','autoInterval'])
        #                                        库位点 前置点  是否有货  锁定的运单id 自动加货 自动清货 状态改变时间戳 自动加货或者清货的间隔
        self.bindata = namedtuple('bindata', ['name', 'goodsType', 'lockId', 'autoAddType', 'autoClearType','changeSt','autoInterval'])
        self.binarea=self.init_area(data)    # 库区信息 {"area_name":{bin_list:[],index:0}}  # index 记录遍历位置
        # self.core=CoreUtil()


    def __del__(self):
        pass

    def init_area(self,data):
        """
        :return: return {} if data is None
        """
        return {}

    def _continues_serach(self,lst):
        """"""
        index = 0
        while True:
            if index >= len(lst):
                index = 0
                yield -1,None
            if not lst[index].lockId:
                index+=1
                continue
            else:
                state,op,block_id=self.core.getOrderState(lst[index].lockId)
                if state=='FINISHED' or 'STOPPED':
                    yield index,op,block_id  # 找到目标元素，返回当前索引
            index += 1

    def update_area(self,data,goodsType=0,autoAddType=0,autoClearType=0,autoInterval=0,ifrandom=False,randomTuple=(0,1)):
        """
        literal meaning
        :param data: {area_name:[bins,...]}
        :param goodsType: 将所有库位初始化为hasGods的值
        :param autoAddType: 自动加货
        :param autoClearType: 自动清货
        :param autoInterval: 自动任务间隔
        :param ifrandom: 库位的hasGoods未指定时是否随机
        :return:
        """
        for name, locs in data.items():
            for loc in locs:
                if ifrandom:
                    self.binarea.setdefault(name, {}).setdefault('bin_list',[]).append(
                        self.bindata(loc, random.choice(randomTuple), 0, autoAddType, autoClearType, time.time(), autoInterval))
                else:
                    self.binarea.setdefault(name, {}).setdefault('bin_list',[]).append(
                        self.bindata(loc, random.choice(randomTuple), 0, autoAddType, autoClearType, time.time(), autoInterval))
            self.binarea.setdefault(name,{}).setdefault('index',0)
        return True


    @property
    def semaphores(self):
        semaphores={}
        for a in self.binarea.keys():
            semaphores.setdefault(a,asyncio.Semaphore(1))
        return semaphores


    async def choose_pos(self,area_name,state,lockId)->tuple:
        """
        根据所传入的areaname找出一个状态为state的库位，并将该库位锁定
        rule1: 不到autoadd放货，不到autoclear取货
        :param area_name:
        :param state:  寻找状态为state的库位 0:无货 ,1,2,3,4...
        :return: 库位名和索引位置
        """
        async with self.semaphores[area_name]:
            offect=self.binarea[area_name]['index']  # 保证雨露均沾的遍历
            area_len=len(self.binarea[area_name]['bin_list'])
            for i in range(area_len):
                if self.binarea[area_name]['bin_list'][(i+offect)%area_len].lockId==0:
                    bin = self.binarea[area_name]['bin_list'][(i + offect) % area_len]
                    if state==0:
                        if bin.autoClearType==bin.goodsType and time.time()-bin.changeSt>bin.autoInterval:
                            self.binarea[area_name]['bin_list'][(i + offect) % area_len] = \
                            self.binarea[area_name]['bin_list'][(i + offect) % area_len]._replace(goodsType=0,lockId=lockId)
                            self.binarea[area_name]['index']=(i + offect) % area_len
                            return bin.bin, (i + offect) % area_len
                    if state:
                        if bin.autoAddType==state and time.time()-bin.changeSt>bin.autoInterval:
                            self.binarea[area_name]['bin_list'][(i + offect) % area_len] = \
                                self.binarea[area_name]['bin_list'][(i + offect) % area_len]._replace(goodsType=state,lockId=lockId)
                            self.binarea[area_name]['index'] = (i + offect) % area_len
                            return bin.bin, (i + offect) % area_len
                    if state==bin.hasGoods:
                        self.binarea[area_name]['bin_list'][(i + offect) % area_len] = \
                            self.binarea[area_name]['bin_list'][(i + offect) % area_len]._replace(lockId=lockId)
                        self.binarea[area_name]['index'] = (i + offect) % area_len
                        return bin.bin, (i + offect) % area_len
                continue
            return False,False


    async def release_bins(self):
        """
        运单完成后释放库位
        :return:
        """
        gener={}
        for k,v in self.binarea.items():
            gener.setdefault(k,self._continues_serach(v['bin_list']))
        while True:
            flag=False
            for area,gen in gener.items():
                try:
                    i,op,toothless=next(gen)
                    if i!=-1:
                        async with self.semaphores[area]:
                            if op=="load":
                                self.binarea[area]['bin_list'][i]=self.binarea[area]['bin_list'][i]._replace(goodsType=0,lockId=0,changeSt=time.time())
                            elif op=="unload":
                                self.binarea[area]['bin_list'][i] = self.binarea[area]['bin_list'][i]._replace(goodsType=toothless[0], lockId=0,
                                                                                           changeSt=time.time())
                    else:
                        flag=True
                except StopIteration:
                    pass
            if flag:
                await asyncio.sleep(5)
            await asyncio.sleep(1)

class Business:
    """业务"""
    def __init__(self, business_id, bins:Bins,vehicles, load_type,region_area,interval=1, const_output=1,core=None, group=None, bus_type=None, from_index=None, to_index=None,):
        """
        :param business_id: 业务id
        :param from_regions: 搬运取货区域
        :param to_regions: 搬运放货区域
        :param interval: 发单间隔等同于生产环境中机器的生产节拍
        :param const_output: 每次需要发单数量，等同于生产环境中机器每次的产量  # note 避免太多未完成运单累计，增加限制 已下发未完成不能超过const_output
        :param bins: 库位对象，所有业务共用库位信息
        :param vehicles: 这些业务需要由哪车完成 用于跟踪料箱车信息
        :param region_index: 取放货区域下标
        :param load_type: 货物类型
        :param region_index:
        """
        self.business_id = str(business_id)
        self.from_index = from_index
        self.to_index = to_index
        self.interval = interval
        self.const_output = const_output
        self.bins = bins
        self.vehicle_dict={vehicle:{} for vehicle in vehicles}  # {name:{cid:gid}}
        self.load_type = load_type
        self.region_area = region_area
        self.runing=[(0,0,0) for i in range(self.const_output)]  # 正在执行的运单  (oid,area,index)
        self.core = core
        self.group = group
        self.bus_type = bus_type

    async def perform_task_load_box(self):
        """每隔设定的时间间隔执行一次搬运操作"""
        while True:
            # 等待库位资源
            to_send=self.const_output-sum((0 for i in self.runing if i[0]==0))
            for i in range(to_send):
                # 选取 load点 ;oid = 'bus' + 1234 + 'type' + 1 + xxxxxxxx
                oid = "bus" + self.business_id+ "type" + str(self.load_type) + str(uuid.uuid4())
                pos, pos_index = await self.bins.choose_pos(area_name=self.from_regions, state= self.load_type, lockid=oid)
                if pos:
                    print(f"Business {self.business_id}:load {pos}")
                    self.core.setShareOrder(oid=oid,loc=pos,operation='load',keytask='load',GoodsType=self.load_type)
                else:
                    # print(f"Business {self.business_id}:can not find load pos")
                    break
                # 让出控制权
                await asyncio.sleep(0)

            # 等待下一个搬运周期
            await asyncio.sleep(self.interval)

    async def perform_task_unload_box(self):
        """每隔设定的时间间隔执行一次搬运操作"""
        while True:
            # 查询机器人是否有新的完成
            for v,c in self.vehicle_dict.items():
                for container in self.core.get_contaioners_data(v):
                    if container['goods_id'].startswith("bus" + self.business_id):
                        if c.get(container["container_name"])==container["goods_id"]:
                            # 已经放货，未接单
                            continue
                        else:
                            c[container["container_name"]] = container["goods_id"]
                            oid = self.business_id + str(uuid.uuid4())
                            pos, pos_index = await self.bins.choose_pos(area_name=self.to_regions, state= 0, lockid=oid)
                            if pos:
                                print(f"Business {self.business_id}:unload {pos}")
                                if container['container_name']=='999':
                                    self.core.setShareOrder(oid=oid, vehicle=v, operation='unload', keyGoodsID=container['goods_id'],
                                                  loc=pos)
                                else:
                                    self.core.setShareOrder(oid=oid,vehicle=v,operation='unload',goodsId=container['goods_id'],loc=pos)
            await asyncio.sleep(1)


    async def perform_task(self, from_appoints = None, to_appoints = None):
        """
        取放货一体
        :param from_appoints: 指定去哪儿放货， 列表：0库位名，1index ,index指的是该库位在库区中是第几个
        :param to_appoints: 指定去哪儿取货, 同上
        :return:
        """
        # 指定了区域中具体的取货地点，说明是设备触发的业务，运行次数由传过来的from_appoints的长度决定
        if len(from_appoints) > 0 :
            # 判断库位状态 为 有货 且 货物type为 self.load_type【加一层判断更安全】
            if self.bins.binarea[self.from_regions]['bin_list'][from_appoints[1]].goodsType == self.load_type:
                pass

            return
        # 指定了区域中具体的放货地点，说明是设备触发的业务，运行次数由传过来的to_appoints的长度决定
        if len(to_appoints):
            # 判断库位状态 为 有货 且 货物type为 0【加一层判断更安全】
            if self.bins.binarea[self.to_regions]['bin_list'][to_appoints[1]].goodsType == 0:
                pass
            return
        # 非设备触发的业务
        while True:
            to_send = self.const_output - sum((0 for i in self.runing if i[0]==0))
            for i in range(to_send):
                # 生成oid = 'bus' + 1234 + 'type' + 1 + xxxxxxxx
                oid = "bus" + self.business_id + "type" + str(self.load_type) + "end" + str(uuid.uuid4())
                # 选取库位 - 要连续选两个库位
                # 取货库位
                pos1, pos_index1 = await self.bins.choose_pos(area_name=self.from_regions, state=self.load_type, lockId=oid)
                # 放货库位
                pos2, pos_index2 = await self.bins.choose_pos(area_name=self.to_regions, state=0,
                                                              lockId=oid)
                if pos1 and pos2:
                    print(f"Business {self.business_id}:load {pos1}")
                else:
                    # print(f"Business {self.business_id}:can not find load pos,no goodsType: {self.load_type}")
                    # 要不要break TODO：
                    break
                # 让出CPU
                await asyncio.sleep(0)
            # 等待下一个搬运周期
            await asyncio.sleep(self.interval)
    async def trace_block(self,area_list=None):
        """"""
        pass


class EL():
    """
    short for Eleven. like Mr.Fantastic, who have a superpower or something,and is extremely sensitive to evil
    """
    gifted_counter=0
    def __init__(self, vehicles,bins,data=None):
        """

        :param vehicles:
        :param bins:
        :param data:
        """
        """
        name: 设备名
        teleportFrom: 加工取货地,列表
        teleportTo: 加工放货地,列表
        originType: 加工前货物类型
        finalType: 加工后货物类型   
        from_area: 取货地的库位归属的区域
        to_area: 放货地的库位归属的区域
        bus_from: 触发取货业务
        bus_to: 绑定的
        workingTime: 加工需要的时间   
        changeSt: 上次使用设备的时间
        state: 设备状态，-1表示设备停用，0表示设备启用中，且设备空闲，1表示设备正在加工货物
        """
        self.normal_manipulation = namedtuple('ability_data',['name','teleportFrom','teleportTo','originType','finalType','from_area','to_area','bus_from','bus_to','workingTime','changeSt','state'])
        self.vehicle_dict = {vehicle: {} for vehicle in vehicles}
        self.power=self.init_area(data)
        self.bins = bins
        EL.gifted_counter+=1

    def __del__(self):
        pass

    def init_area(self, data):
        """
        初始化
        :param data:
        :return:
        """
        # 初始化，teleport_from 、teleport_to
        # 获取 teleport_from 中每个元素在 库位Bins中 from_area 中的位置
        from_area = buss_area.get(data["from_area"])
        positions_from = [
            from_area.index(element) if element in from_area else -1
            for element in data["teleport_from"]
        ]  # 如果元素不存在，返回 -1
        # 如果有元素不存在，就抛异常
        if positions_from.__contains__(-1):
            raise ValueError(f"teleport_from有误，在from_area找不到")
        # 获取 teleport_to 中每个元素在  库位Bins中 to_area 中的位置
        to_area = buss_area.get(data["to_area"])
        positions_to = [
            to_area.index(element) if element in to_area else -1
            for element in data["teleport_to"]
        ]  # 如果元素不存在，返回 -1
        if positions_to.__contains__(-1):
            raise ValueError(f"teleport_to有误，在to_area中找不到")
        # 初始化赋值 - 返回
        return self.normal_manipulation(data["name"],
                                          dict(zip(data["teleport_from"],positions_from)),
                                          dict(zip(data["teleport_to"], positions_to)),
                                          data["origin_type"],
                                          data["final_type"],
                                          data["from_area"],
                                          data["to_area"],
                                          data["bus_from"],
                                          data["bus_to"],
                                          data["working_time"],
                                          data["changeSt"],
                                          data["state"]
                                              )

    async def get_through(self):
        """
        设备加工货物
        :return:
        """
        while True:
            # 设备空闲，找货物去加工
            if self.power.state == 0:
                # 标记teleportFrom中库位是否有货
                teleport_flg = True
                # 设备加工
                for key, value in self.power.teleportFrom.items():
                    # 判断库位状态 为 有货 且 货物为originType
                    if self.bins.binarea[self.power.from_area]['bin_list'][value].goodsType == self.power.originType:
                        # 将设备设为正在加工货物
                        self.power = self.power._replace(state=1,changeSt=time.time())
                        # 将库位设为空 - 货物这会在设备上 TODO:修改为调用方法
                        self.bins.binarea[self.power.from_area]['bin_list'][value] = \
                            self.bins.binarea[self.power.from_area]['bin_list'][value]._replace(goodsType=0)
                        # 触发业务过来放货
                        self.power.bus_from.perform_task_box(to_appoints=self.power.teleportFrom)
                        # 库位中存在有货库位
                        teleport_flg = False
                        break
                if teleport_flg:
                    # 代码能走到这里，说明设备空闲的，但没有找到库位去取货，触发业务过来放货
                    tasks = []
                    for key, value in self.power.teleportFrom.items():
                        appoints = [key,value]
                        task = asyncio.create_task(self.power.bus_from.perform_task_box(to_appoints=appoints))
                        tasks.append(task)
                    # 这里是需要等待至少有一个业务补货完成再继续运功设备
                    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

            # 设备运行中，待加工完成，去放货
            if self.power.state == 1 and (time.time() - self.power.changeSt) >= random.gauss(mu=self.power.workingTime, sigma=0.1 * self.power.workingTime):
                # 标记teleportTo中库位是否有货
                teleport_flg = True
                # 获取放置目标库位
                for key, value in self.power.teleportTo.items():
                    if self.bins.binarea[self.power.to_area]['bin_list'][value].goodsType == 0:
                        # TODO:修改为调用方法
                        self.bins.binarea[self.power.to_area]['bin_list'][value] = \
                            self.bins.binarea[self.power.to_area]['bin_list'][value]._replace(goodsType=self.power.finalType)
                        # 加工结束
                        self.power = self.power._replace(state=0)
                        # 出发业务把货拿走
                        self.power.bus_to.perform_task_box(from_appoints=self.power.teleportTo)
                        teleport_flg = False
                        break
                if teleport_flg:
                    # 代码能走到这里，说明设备没有找到库位去放货，触发业务过来取货
                    tasks = []
                    for key, value in self.power.teleportTo.items():
                        appoints = [key,value]
                        task = asyncio.create_task(self.power.bus_from.perform_task_box(from_appoints=appoints))
                        tasks.append(task)
                    # 这里是需要等待至少有一个业务补货完成再继续运功设备
                    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
            # 让出CPU
            await asyncio.sleep(0.5)



class Demogorgon():
    """
    Evil stuff can affect the development of events
    """
    pass


class OrderSystem:
    def __init__(self,bins):
        self.businesses = []
        self.bins = bins

    def add_business(self, business):
        self.businesses.append(business)

    def balance(self):
        """todo 均衡
        当所有业务形成一个闭环，任意业务效率降低必将影响整体效率，因此，所有业务同时进行时，应考虑如下情况
        1. 各个业务效率固定不变的情况下，如果某个业务运单完成速率降低，该如何动态的调整资源分配
        2. 各个业务效率变化情况，变化符合正太分布，该如何动态的调整资源分配
        """
        pass

    async def run(self):
        """启动所有业务并并发执行"""
        tasks = []
        for business in self.businesses:
            tasks.append(asyncio.create_task(business.perform_task_load_box()))
            tasks.append(asyncio.create_task(business.perform_task_unload_box()))
        # 等待所有任务完成
        tasks.append(asyncio.create_task(self.bins.release_bins()))
        await asyncio.gather(*tasks)
async def main():
    # 初始化发单系统
    test_data1={'A':buss_area.get("A")}
    test_data2 = {'B': buss_area.get("B")
                 }
    bins = Bins()
    core = CoreUtil()
    order_system = OrderSystem(bins=bins)
    vehicles=[f"AMB-0{i}" for i in range(1,7)]
    for i in vehicles:
        # clear containers
        requests.post(url=f'{cg.ip}/clearAllContainersGoods', json={"vehicle": i})
        # 机器人行驶速度 + 模拟充电
        res = requests.post(cg.ip + '/updateSimRobotState', json={
            "vehicle_id": i,
            "rotate_speed": 30,
            "speed": 1,
            "battery_percentage": 1,
            # "charge_speed":0.005,
            # "enable_battery_consumption":True,
            # "no_task_battery_consumption": 0.05,
            # "task_battery_consumption":0.35
        })
    # core_utils = CoreUtil()
    # core_utils.set_operation_time(vehicles,operation='script', t = 18)
    # core_utils.modifyParamNew(data={
    #     "RDSDispatcher":{
    #         "MovableParkInPath":True,
    #         "AutoMovablePark":True,
    #         "ParkingRobotMoveOthers":True,
    #         "AutoPark":True,
    #         "DelayFinishTime":0
    #     }
    # })
    bins.update_area(test_data1, autoAddType=1,autoClearType=1,ifrandom=True)
    bins.update_area(test_data2, autoAddType=1, autoClearType=1, ifrandom=True)
    # 设备绑定的点位A
    teleportFrom = ['AP774', 'AP776']
    # 设备绑定的点位B
    teleportTo = ['AP940', 'AP1351']
    # A

    # 1 到 2，运货
    # bus_data =
    business1 = Business(business_id=1, from_regions="A", to_regions="B", interval=5, const_output=500,
                         bins=bins,vehicles=vehicles,load_type=1, core=core)
    data = {
        "name": '01',
        "teleport_from": teleportFrom,
        "teleport_to": teleportTo,
        "origin_type": 1,
        "final_type": 2,
        "from_area": 'A',
        "to_area": "B",
        "bus_from": business1,
        "bus_to": business1,
        "working_time": 18,
        "changeSt": 0,
        "state": 0
    }
    el = EL(vehicles=vehicles,bins=bins,data=data)
    await el.get_through()
    # 创建多个业务，每个业务都有不同的搬运周期
    # # 1 到 2，运货
    # business1 = Business(business_id=1, from_regions="area1", to_regions="area2", interval=5, const_output=500,
    #                      bins=bins,vehicles=vehicles,type=1)
    # # 2 到 3 运货
    # business2 = Business(business_id=2, from_regions="area2", to_regions="area3", interval=5, const_output=500,
    #                      bins=bins,vehicles=vehicles,type=1)
    # # 3 到 2 运空箱
    # business3 = Business(business_id=3, from_regions="area3", to_regions="area2", interval=5, const_output=500,
    #                      bins=bins, vehicles=vehicles,type=2)
    # # 2 到 1 运空箱
    # business4 = Business(business_id=4, from_regions="area2", to_regions="area1", interval=5, const_output=500,
    #                      bins=bins, vehicles=vehicles,type=2)
    #
    # # 将所有业务添加到系统中
    # order_system.add_business(business1)
    # order_system.add_business(business2)
    # order_system.add_business(business3)
    # order_system.add_business(business4)
    # # 启动发单系统
    # await order_system.run()



if __name__ == "__main__":
    # asyncio.run(main())
    # data={'test1':['4'],'test2':['5','6'],'test3':['1','2']}
    # bins=Bins()
    # bins.update_area(data)
    # data2 = { 'test3': ['7', '8']}
    # bins.update_area(data2,ifrandom=True)
    # print(len(bins.semaphores))
    #
    asyncio.run(main())
